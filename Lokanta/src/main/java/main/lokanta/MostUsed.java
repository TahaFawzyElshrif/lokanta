package main.lokanta;import com.github.rcaller.rstuff.RCaller;import com.github.rcaller.rstuff.RCallerOptions;import com.github.rcaller.rstuff.RCode;import interfaces.servicesINT;import java.io.File;import java.io.FileInputStream;import java.util.ArrayList;import java.util.Arrays;import java.util.logging.Level;import java.util.logging.Logger;import javafx.application.Application;import javafx.event.ActionEvent;import javafx.event.EventHandler;import javafx.geometry.Insets;import javafx.scene.Scene;import javafx.scene.control.*;import javafx.scene.image.Image;import javafx.scene.layout.Background;import javafx.scene.layout.BackgroundFill;import javafx.scene.layout.CornerRadii;import javafx.scene.layout.HBox;import javafx.scene.layout.VBox;import javafx.scene.paint.Color;import javafx.scene.paint.ImagePattern;import javafx.stage.DirectoryChooser;import javafx.stage.Stage;import objects.*;public class MostUsed extends servicesINT implements java.io.Serializable, Cloneable {//class for most ordered    public MostUsed() {    }    public MostUsed(restaurant rest, branch branch) {        this.rest = rest;        this.branch = branch;    }    public static void main(String[] args) {        try {            Application.launch(args);        } catch (Exception ex) {        }    }    public void start(Stage stage) throws Exception {        center();        body();        stage = super.stage;        stage.setTitle(branch.branchManagerName + " Good Night Chielf");        Scene scene = new Scene(super.back);        stage.setScene(scene);        stage.show();    }     private void addAnalyticsItem(VBox ordersVBox, String[] mostUsed) {        for (int i = 0; i < mostUsed.length / 2; i++) {            HBox lineHBox = new HBox();            Label Food = new Label(mostUsed[i] + " ----> ");            Food.setBackground(new Background(new BackgroundFill(Color.BLUE, CornerRadii.EMPTY, Insets.EMPTY)));            Label n_taken = new Label(mostUsed[i + mostUsed.length / 2]);            n_taken.setBackground(new Background(new BackgroundFill(Color.GREEN, CornerRadii.EMPTY, Insets.EMPTY)));            lineHBox.getChildren().addAll(Food, n_taken);            ordersVBox.getChildren().add(lineHBox);        }    }    @Override    public void center() {        String R_Code = Mining1.RScript();        String[] mostUsed_ResultOFR = Mining1.prepareR("Invok_mostOrdered", "MostOrdered", "C:/Lokanta/restaurant/" + rest.name + "/branches/" + branch.name + "/Meals/meals orders.csv");        VBox ordersVBox = new VBox();        addAnalyticsItem(ordersVBox, mostUsed_ResultOFR);        Button MakePDF = new Button("Make PDF");        MakePDF.setOnAction(new EventHandler<ActionEvent>() {            @Override            public void handle(ActionEvent t) {                try {                     DirectoryChooser dir_chooser = new DirectoryChooser();                     File file = dir_chooser.showDialog(back.getScene().getWindow());                      if (file != null) {                        RCode code = RCode.create();                        code.addRCode(Mining1.RScript());                        code.addRCode("addPDF <-MakePDF(\"" + file.getAbsolutePath() + "//Pie Diagram.pdf\",\"C:/Lokanta/restaurant/" + rest.name + "/branches/" + branch.name + "/Meals/meals orders.csv\"");                        RCaller caller = RCaller.create(code, RCallerOptions.create());                        caller.runAndReturnResult("addPDF");                                            }                } catch (Exception ex) {                    System.out.print(ex);                }            }        });        ordersVBox.getChildren().add(MakePDF);        //adding to scroll pane        ScrollPane scroll = new ScrollPane();        scroll.setPrefSize(595, 200);        scroll.setContent(ordersVBox);        back.setCenter(scroll);    }}